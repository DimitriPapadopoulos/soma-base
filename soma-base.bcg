

#-----------------------------------------------------------------------------
class CppComponent_soma( GenericMakerComponent ):
  _name = 'soma_cpp'

  def __init__( self, opts ):
    options[ 'soma_cpp' ] = options[ 'soma' ]
    GenericMakerComponent.__init__( self, options[ 'soma' ] )


  def dependencies( self ):
    return []

  def name( self ):
    return 'soma'

  def _libraries( self ):
    # return [ 'soma' ]
    return []

  def makeDocumentation( self ):
    print 'soma_cpp doc'
    print self.doDoxygen()
    GenericMakerComponent.makeDocumentation( self )
    print 'soma_cpp doc done'

  def templateConfigurationFiles( self ):
    return [ os.path.join( self.sourceDir(), i ) for i in
             ( 'config-cpp-command.template', 
               'config-cpp-library.template', 
               'config-cpp-plugin.template' ) ]

  def filesToPack( self ):
    # avoid packaging twice...
    return []

  def packageDocs( self ):
    pass


#-----------------------------------------------------------------------------
class SipComponent_soma( GenericMakerComponent ):
  _name = 'soma_sip'

  def __init__( self, opts ):
    options[ 'soma_sip' ] = options[ 'soma' ]
    GenericMakerComponent.__init__( self, options[ 'soma' ] )

  def name( self ):
    return 'soma'

  def _libraries( self ):
    return []

  def dependencies( self ):
    return [ 'soma_cpp', 'pyaims' ]

  def postInit( self ):
    if not self._initialized:
      GenericMakerComponent.postInit( self )
      source = os.path.join( self.sourceDir(), 'src', 'sip' )
      build = os.path.join( self.componentBuildDir(), 'src', 'sip' )
      self._data[ 'sipinclude' ] = SipComponent.sipinclude( self )

  def doEpydoc( self ):
    return True

  def pythonModule( self ):
    return 'somasip'

  def templateConfigurationFiles( self ):
    return [ os.path.join( self.sourceDir(), i ) for i in
             ( 'config-sip.template', ) ]

  def build( self, instances ):
    if not self._found or self._data[ 'enabled' ] == '0':
      return

    # genrate SIP files from templates
    source = os.path.join( self.sourceDir(), 'src', 'sip' )
    build = os.path.join( self.componentBuildDir(), 'src', 'sip' )
    cwd = os.getcwd()
    os.chdir( source )
    pyaims = getInstance( PyAimsComponent )
    pad = os.path.join( pyaims.sourceDir(), 'src', 'sip' )
    cmd = sys.executable + ' "' \
      + os.path.join( pad, 'maketemplates.py' ) + '" -c -o "' \
      + build + '"'
    os.system( cmd )
    os.chdir( cwd )
    # regular build
    print 'regular build'
    GenericMakerComponent.build( self, instances )

  def filesToPack( self ):
    # avoid packaging twice...
    return []

  def packageDocs( self ):
    pass



#-----------------------------------------------------------------------------
class PythonComponent_soma( GenericMakerComponent ):
  _name = 'soma_python'

  def __init__( self, opts ):
    options[ 'soma_python' ] = options[ 'soma' ]
    GenericMakerComponent.__init__( self, options[ 'soma' ] )

  def name( self ):
    return 'soma'

  def _libraries( self ):
    return []

  def dependencies( self ):
    return []

  def doEpydoc( self ):
    return True

  def pythonModule( self ):
    return 'soma'

  def configureCompilation( self ):
    pass

  def filesToPack( self ):
    # avoid packaging twice...
    return []

  def packageDocs( self ):
    pass


#-----------------------------------------------------------------------------
class Component_soma( GenericMakerComponent ):
  _name = 'soma'

  def dependencies( self ):
    return [ 'soma_python' ]


  def _libraries( self ):
    return []

  def templateConfigurationFiles( self ):
    return []


  def configureCompilation( self ):
    pass

  def build( self, instances ):
    pass

  def makeDoxygenDocumentation( self ):
    pass
