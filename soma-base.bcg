
#-----------------------------------------------------------------------------
class CppComponent_somabase( GenericMakerComponent ):
  _name = 'soma-base_cpp'

  def __init__( self, opts ):
    options[ 'soma-base_cpp' ] = options[ 'soma-base' ]
    GenericMakerComponent.__init__( self, options[ 'soma-base' ] )


  def dependencies( self ):
    return []

  def sourceName( self ):
    return 'soma-base'

  def _libraries( self ):
    # return [ 'soma-base' ]
    return []

  def shareDir( self ):
    return os.path.join( 'share', 'soma-' + self.version() )

  def docDir( self ):
    return os.path.join( 'share', 'doc', 'soma-' + self.version() )

  def makeDocumentation( self ):
    print 'soma-base_cpp doc'
    print self.doDoxygen()
    GenericMakerComponent.makeDocumentation( self )
    print 'soma-base_cpp doc done'

  def templateConfigurationFiles( self ):
    return [ os.path.join( self.sourceDir(), i ) for i in
             ( 'config-cpp-command.template', 
               'config-cpp-library.template', 
               'config-cpp-plugin.template',
               'config-cpp-libgui.template',
               'config-sipgui.template' ) ]

  def filesToPack( self ):
    # avoid packaging twice...
    return []

  def packageDocs( self ):
    pass


#-----------------------------------------------------------------------------
class CppGuiComponent_somabase( GenericMakerModuleComponent ):
  _name = 'soma-base_cpp-gui'

  def dependencies( self ):
    return [ QtComponent, 'soma-base_cpp' ]

  def sourceName( self ):
    return 'soma-base'

  def _libraries( self ):
    return [ 'somaqtgui' ]

  def shareDir( self ):
    return os.path.join( 'share', 'soma-' + self.version() )

  def docDir( self ):
    return os.path.join( 'share', 'doc', 'soma-' + self.version() )


#-----------------------------------------------------------------------------
class SipComponent_somabase( GenericMakerComponent ):
  _name = 'soma-base_sip'

  def __init__( self, opts ):
    options[ 'soma-base_sip' ] = options[ 'soma-base' ]
    GenericMakerComponent.__init__( self, options[ 'soma-base' ] )

  def sourceName( self ):
    return 'soma-base'

  def _libraries( self ):
    return []

  def dependencies( self ):
    return [ 'soma-base_cpp', SipComponent ]

  def shareDir( self ):
    return os.path.join( 'share', 'soma-' + self.version() )

  def docDir( self ):
    return os.path.join( 'share', 'doc', 'soma-' + self.version() )

  def postInit( self ):
    if not self._initialized:
      GenericMakerComponent.postInit( self )
      source = os.path.join( self.sourceDir(), 'src', 'sip' )
      build = os.path.join( self.componentBuildDir(), 'src', 'sip' )
      self._data[ 'sipinclude' ] = SipComponent.sipinclude( self )

  def doEpydoc( self ):
    return True

  def pythonModule( self ):
    return 'soma-basesip'

  def templateConfigurationFiles( self ):
    return [ os.path.join( self.sourceDir(), i ) for i in
             ( 'config-sip.template', ) ]

  def build( self, instances ):
    if not self._found or self._data[ 'enabled' ] == '0':
      return

    # genrate SIP files from templates
    source = os.path.join( self.sourceDir(), 'src', 'sip' )
    build = os.path.join( self.componentBuildDir(), 'src', 'sip' )
    cwd = os.getcwd()
    os.chdir( source )
    pyaims = getInstance( PyAimsComponent )
    pad = os.path.join( pyaims.sourceDir(), 'src', 'sip' )
    cmd = sys.executable + ' "' \
      + os.path.join( pad, 'maketemplates.py' ) + '" -c -o "' \
      + build + '"'
    os.system( cmd )
    os.chdir( cwd )
    # regular build
    print 'regular build'
    GenericMakerComponent.build( self, instances )

  def filesToPack( self ):
    # avoid packaging twice...
    return []

  def packageDocs( self ):
    pass



#-----------------------------------------------------------------------------
class SipGuiComponent_somabase( GenericMakerModuleComponent ):
  _name = 'soma-base_sip-gui'

  def sourceName( self ):
    return 'soma-base'

  def _libraries( self ):
    return []

  def dependencies( self ):
    return [ 'soma-base_cpp-gui', PyQtComponent ]

  def shareDir( self ):
    return os.path.join( 'share', 'soma-' + self.version() )

  def docDir( self ):
    return os.path.join( 'share', 'doc', 'soma-' + self.version() )

  def postInit( self ):
    if not self._initialized:
      GenericMakerComponent.postInit( self )
      source = os.path.join( self.sourceDir(), 'src', 'sipsomaqtgui' )
      build = os.path.join( self.componentBuildDir(), 'src', 'sipsomaqtgui' )
      self._data[ 'sipinclude' ] = [ '-I', build, '-I', source ]
      self._data[ 'sipinclude' ] = SipComponent.sipinclude( self )
      #print 'soma sipinclude:', self._data[ 'sipinclude' ]
      qtc = getInstance( QtComponent )
      if qtc.version()[0] < 4:
        self._data[ 'gradwidget_sip' ] = 'gradwidget_qt3.sip'
      else:
        self._data[ 'gradwidget_sip' ] = 'gradwidget_qt4.sip'

  def doEpydoc( self ):
    return True

  def pythonModule( self ):
    return 'soma.qtgui.gradwidget'


#-----------------------------------------------------------------------------
class PythonComponent_somabase( GenericMakerComponent ):
  _name = 'soma-base_python'

  def __init__( self, opts ):
    options[ 'soma-base_python' ] = options[ 'soma-base' ]
    GenericMakerComponent.__init__( self, options[ 'soma-base' ] )

  def sourceName( self ):
    return 'soma-base'

  def _libraries( self ):
    return []

  def dependencies( self ):
    return []

  def shareDir( self ):
    return os.path.join( 'share', 'soma-' + self.version() )

  def docDir( self ):
    return os.path.join( 'share', 'doc', 'soma-' + self.version() )

  def doEpydoc( self ):
    return True

  def pythonModule( self ):
    return 'soma'

  def configureCompilation( self ):
    pass

  def filesToPack( self ):
    # avoid packaging twice...
    return []

  def packageDocs( self ):
    pass


#-----------------------------------------------------------------------------
class Component_somabase( GenericMakerComponent ):
  _name = 'soma-base'

  def dependencies( self ):
    return [ 'soma-base_python' ]

  def weakDependencies( self ):
    return []

  def _libraries( self ):
    return []

  def shareDir( self ):
    return os.path.join( 'share', 'soma-' + self.version() )

  def docDir( self ):
    return os.path.join( 'share', 'doc', 'soma-' + self.version() )

  def templateConfigurationFiles( self ):
    return []


  def configureCompilation( self ):
    pass

  def build( self, instances ):
    pass

  def makeDoxygenDocumentation( self ):
    pass

